<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[HTML5学习第二天]]></title>
      <url>%2F2017%2F03%2F03%2FHTML5%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9%2F</url>
      <content type="text"><![CDATA[盒子模型 属性每个盒子模型都有四个属性 内容(content) 填充(内边距,padding) 边框(border) 边界(margin,外边距) 标准盒子模型图 内容属性 height max-height min-height width max-width min-width 填充属性(内边距,padding) padding padding-bottom padding-left padding-right padding-top举例子:内边距1234padding: 10px 5px 15px 10px; 设置上,左,下,右内边距padding: 10px 5px 15px; 设置上,左右,下边距padding: 10px 5px; 设置上下,左右边距padding: 10px; 设置上下左右边距 边框(border):设置4个边框的样式123p&#123;border: 5px solid red;&#125; border简写属性在一个声明设置所有的边框属性可以按顺序设置如下属性: border-width border-style border-color设置边框设置: border-radius 边界(margin,外边距) margin margin-top margin-bottom margin-left margin-right1234margin: 10px 5px 15px 10px; 设置上,左,下,右外边距margin: 10px 5px 15px; 设置上,左右,外边距margin: 10px 5px; 设置上下,左右外边距margin: 10px; 设置上下左右外边距 CSS3新增特性 RGBA透明度1&lt;div style=&quot;width: 100px; background-color: rgba(255,0,0,1)&quot;&gt;看我的效果&lt;/div&gt; 看我的效果 块阴影 值说明:h-shadow必需。水平阴影的位置。允许负值。v-shadow必需。垂直阴影的位置。允许负值。blur可选。模糊距离。spread可选。阴影的尺寸。color可选。阴影的颜色。请参阅 CSS 颜色值。inset可选。将外部阴影 (outset) 改为内部阴影。12//设置的顺序以此为: 水平阴影, 垂直阴影, 阴影的模糊距离,以及阴影的颜色&lt;div style=&quot;width: 100px; height: 25px; box-shadow: 5px 5px 10px black;&quot;&gt;我是盒子&lt;/div&gt; 我是盒子 文字阴影在设置参数上与块阴影是一样的1&lt;p style=&quot;font-size: 20px; color: aqua; text-shadow: 5px 5px 10px black&quot;&gt;我看着你呢&lt;/p&gt; 我看着你呢]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTML学习第一天]]></title>
      <url>%2F2017%2F03%2F02%2FHTML%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%2F</url>
      <content type="text"><![CDATA[HTML5 基础介绍 2014年制定完HTML5标准 利用HTML5编写的UI能够运行在所有的浏览器的平台 手机APP的开发模式: 原生 纯HTML5 原生 + HTML5 自动更新 Web3.0 : HTML5 + CSS3 HTML5: Canvas HTML5音视频 Web存储 Geolocation Workers多线程处理 CSS3亮点: 设计动画 2D变形 一个完整的网页由三部分组成： HTML CSS JavaScript W3school HTML的常见使用 HTML： 超文本标记语言 浏览器负责将它解析成具体的网页内容，HTML语言是松散的 WebStorm的使用： 注释快捷键：command + / 线条： 1\&lt;hr&gt; 输入 1&lt;input placeholder=&quot;我是占位文字&quot;&gt; 1&lt;input value=&quot;我是默认的文字&quot;&gt; 1&lt;input type=&quot;date&quot;&gt; 1&lt;input type=&quot;file&quot;&gt; 1&lt;input type=&quot;color&quot;&gt; 1&lt;input type=&quot;radio&quot;&gt; 1&lt;input type=&quot;checkbox&quot;&gt; 图片标签 alt: 图片显示失败的时候，显示的文字提示 1&lt;img src=&quot;abc.jpg&quot; alt=&quot;这是一张图片&quot;&gt; 12&lt;!—相对路径--&gt;&lt;img src=&quot;image/IMG_0084.png&quot;&gt; 12&lt;!—绝对路径 固定了宽，高会按比例自动缩放—&gt;&lt;img src=&quot;https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png&quot; width=&quot;100&quot;&gt; 12&lt;!—绝对路径 设置宽与父元素的比例，这样能更好的适配，相对于设置固定的宽度—&gt;&lt;img src=&quot;https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png&quot; width=&quot;50%&quot;&gt; 换行标签 1&lt;br&gt; 列表标签 12345678&lt;ul&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt;&lt;/ul&gt; 无序列表 无序列表 无序列表 无序列表 无序列表 无序列表 12345678&lt;ul&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt; &lt;li&gt;无序列表&lt;/li&gt;&lt;/ul&gt; 有序列表 有序列表 有序列表 有序列表 有序列表 超链接 1&lt;a target=&quot;_self&quot; href=&quot;https://www.baidu.com&quot;&gt;我是超链接&lt;/a&gt; 我是超链接 1&lt;a target=&quot;_blank&quot; href=&quot;https:www.baidu.com&quot;&gt;我是超链接&lt;/a&gt; 我是超链接 1&lt;a target=&quot;_top&quot; href=&quot;#&quot;&gt;回到顶部&lt;/a&gt; 回到顶部 1&lt;meter value=&quot;30&quot; max=&quot;100&quot; min=&quot;0&quot;&gt;30%&lt;/meter&gt; 30% 1&lt;progress value=&quot;40&quot; max=&quot;100&quot;&gt;&lt;/progress&gt; 1&lt;audio src=&quot;../audio/music.m4a&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt; 视频图片1&lt;video src=&quot;http://player.youku.com/player.php/Type/Folder/Fid//Ob//sid/XMjU1MjMwMDAzNg==/v.swf&quot;&gt;&lt;/video&gt; CSS CSS的使用样式 行内样式 页内样式 外部样式 行内样式1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;css的行内样式&lt;/title&gt;&lt;/head&gt;&lt;body style=&quot;background-color: red;&quot;&gt;//style作为元素的一个属性，将所有样式的样式写在style属性当中 &lt;div style=&quot;color: blue; font-size: 18px; background-color: aqua;&quot;&gt;我是容器标签&lt;/div&gt; &lt;p style=&quot;color: red; font-size: 60px; border: 5px double purple;&quot;&gt;我是段落标签&lt;/p&gt; &lt;p style=&quot;color: red; font-size: 60px; border: 5px solid purple;&quot;&gt;我是段落标签&lt;/p&gt; &lt;p style=&quot;color: red; font-size: 60px; border: 5px dashed purple;&quot;&gt;我是段落标签&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 页内样式1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;css的页内样式&lt;/title&gt; &lt;link href=&quot;css/index.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;!-- css规律: 就近原则 叠加原则 --&gt; //在head标签当中写标签样式，样式写在&lt;style&gt;&lt;/style&gt;当中 &lt;style&gt; div&#123; color: red; font-size: 30px; border: 4px solid yellow; &#125; p&#123; color: blue; font-size: 44px; background-color: yellowgreen; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 外部样式1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;css外部样式&lt;/title&gt; //链接外部css文件 &lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;div&gt;我是容器标签&lt;/div&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt; &lt;p&gt;我是段落标签&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; css中的内容1234567891011div&#123; color: olivedrab; font-size: 66px; background-color: green;&#125;p&#123; color: goldenrod; font-size: 2px; border: 2px solid red;&#125; CSS选择器 标签选择器 12345&lt;div&gt;div1&lt;/div&gt;&lt;div&gt;div2&lt;/div&gt;div&#123; color: red; &#125; 类选择器12345678&lt;p class=&quot;high&quot;&gt;第一段文子&lt;/p&gt;&lt;p&gt;第二段文字&lt;/p&gt;&lt;div class=&quot;high&quot;&gt;div1&lt;/div&gt;&lt;div&gt;div2&lt;/div&gt;// . + 类名.high &#123; color: red; &#125; ID选择器123456css: #main &#123; color: gray&#125;html: &lt;div id=&quot;main&quot;&gt;我是div标签&lt;/div&gt; 并列选择器1234567css: 用逗号(,)隔开div , .test1 &#123; color: red;&#125;html: 以下两者都满足&lt;div&gt;我是div&lt;/div&gt;&lt;p class=&quot;test1&quot;&gt;我是段落&lt;/p&gt; 123456css: id值为main，或者class值为test1#main , .test1 &#123;&#125;html: 以下两者都满足&lt;div id=&quot;main&quot;&gt;&lt;/div&gt;&lt;div class=&quot;test1&quot;&gt;&lt;/div&gt; 复活选择器12345css: div标签并且必须类值为test1div.test1&#123;&#125;html:&lt;div class=&quot;test1&quot;&gt;&lt;/div&gt; 后代选择器123456css: div中的p标签（包括子类和孙子类）div p &#123;&#125;html: 以下两个都满足&lt;div&gt;&lt;p&gt;我满足条件&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;h2&gt;&lt;p&gt;我也满足&lt;/p&gt;&lt;/h2&gt;&lt;/div&gt; 直接后代选择器12345css: div &gt; a &#123;&#125;html:&lt;div&gt;&lt;a href=&quot;#&quot;&gt;我满足&lt;/a&gt;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;#&quot;&gt;我不满足😌&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; 属性选择器123456css:div[name]&#123;&#125;html:&lt;div name=&quot;jack&quot;&gt;我满足&lt;/div&gt;&lt;div name=&quot;rose&quot;&gt;我也满足&lt;/div&gt;&lt;div age=&quot;23&quot;&gt;我不满足&lt;/div&gt; 特定属性值选择器12345css:div[name=&quot;jack&quot;]&#123;&#125;html:&lt;div name=&quot;rose&quot;&gt;我不😌&lt;/div&gt;&lt;div name=&quot;jack&quot;&gt;我满足😄&lt;/div&gt; 伪类1234567891011121314151617css: /*触发某些操作的时候更改一些样式*/input:focus &#123;/*去除外线条*/outline: none;height: 50px;font-size: 20px;&#125;/*当鼠标移动上来*/#main:hover&#123;width: 300px;height: 200px;background-color: aqua;&#125;html:&lt;div id=&quot;main&quot;&gt;我是div标签&lt;/div&gt;&lt;input placeholder=&quot;我是输入框&quot;&gt; 伪元素/伪元素 比如段落的第一个字母变大,可以通过伪元素实现/ 选择器优先级选择器的权值： 通配选择符(*) : 0 标签: 1 类: 10 属性：10 伪类： 10 伪元素: 10 id: 100 important: 1000 原则： 选择器的权值加到一起，大的优先；如果权值相同，后定义的优先 优先级顺序： important &gt; 内联（行内style）&gt;id&gt;类|伪类|伪元素|属性|伪元素&gt;标签&gt;统配选择符 HTML标签的分类和修改 标签的分类 块级标签 独占一行，能够通过css修改高度(div、p、h1、h2、ul、li…) 行内标签（内联标签） 多个行内标签能同时显示在一行，并且无法修改其宽高 宽度和高度取决于内容的尺寸 (span、a、label….) 行内-块级标签 (内联-块级标签) 多个行类块级标签能够显示在一行 :具备了内联标签的特点 能够设置宽度和高度(input, button) : 具备了块级标签的特点修改标签的显示类型通过css中的display属性，能够修改显示的类型 none: 隐藏标签 block: 让标签变成块级标签 inline: 让标签变成内联标签 inline-block: 让标签变成内联-块级标签 其他属性介绍cursor： 🖱鼠标样式text-decoration:规定添加到文本的修饰123456789101112131415161718&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;h1 &#123;text-decoration: overline&#125;h2 &#123;text-decoration: line-through&#125;h3 &#123;text-decoration: underline&#125;h4 &#123;text-decoration: blink&#125;a &#123;text-decoration: none&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;这是标题 1&lt;/h1&gt;&lt;h2&gt;这是标题 2&lt;/h2&gt;&lt;h3&gt;这是标题 3&lt;/h3&gt;&lt;h4&gt;这是标题 4&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/index.html&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; line-through: 看我overline:看我underline:看我blink:看我 用text-decoration去掉超链接的下划线 这是一个超链接，但是没有下划线，因为我有值为none的text-decoration呀 text-indent将段落的第一行缩进 50 像素：1234css:p&#123; text-indent:50px;&#125; list-style:把图像设置为列表中的列表项目标记：1234css:ul&#123; list-style:square inside url(&apos;/i/arrow.gif&apos;); &#125; 12345678910111213141516171819&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;ul &#123;list-style: square inside url(&apos;/i/eg_arrow.gif&apos;)&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;&lt;li&gt;咖啡&lt;/li&gt;&lt;li&gt;茶&lt;/li&gt;&lt;li&gt;可口可乐&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 可以按顺序设置如下属性： list-style-type list-style-position list-style-imag overflow: 在宽高固定的情况下，内容超出的时候的显示样式123456div &#123; width:150px; height:150px; overflow:scroll; &#125; 默认值： visible可能的值值 描述visible 默认值。内容不会被修剪，会呈现在元素框之外。 hidden 内容会被修剪，并且其余内容是不可见的。 scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。 auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。 inherit 规定应该从父元素继承 overflow 属性的值。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[UIWindow笔记]]></title>
      <url>%2F2017%2F03%2F02%2FUIWindow%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[UIWindow更多的时候只作为UIView的顶层容器存在 UIWindow的主要作用有： 作为UIView的最顶层容器，包含应用所需要的所有的UIView 传递触摸消息和键盘事件给UIView 为UIWindow增加UIView 因为其本身是UIView的子类，所以可以调用addSubView方法 通过设置其特有的rootViewController属性。 通过设置其属性添加view对应的UIViewController，UIWindow自动将其view添加到当前window中。同时负责维护ViewController和view的生命周期。 系统对UIWindow的使用 调用系统的控件时(UIAlertView)，iOS系统为了保证UIAlertView在所有的界面之上，它会临时创建一个新的UIWindow，通过将其UIWindow的UIWindowLevel设置得更高，让UIAlertView盖在所有的应用界面之上 WindowLevel UIWindow的UIWindowLevel属性，定义了UIWindow的层级 UIKIT_EXTERN const UIWindowLevel UIWindowLevelNormal; UIKIT_EXTERN const UIWindowLevel UIWindowLevelAlert; UIKIT_EXTERN const UIWindowLevel UIWindowLevelStatusBar 通过代码将这些值输出： NSLog(@&quot;UIWindowLevelAlert - %lf ,UIWindowLevelNormal %lf, UIWindowLevelStatusBar %lf&quot;,UIWindowLevelAlert,UIWindowLevelNormal,UIWindowLevelStatusBar); 输出的结果为： UIWindowLevelAlert - 2000.000000 ,UIWindowLevelNormal 0.000000, UIWindowLevelStatusBar 1000.000000 默认的UIWindow层级为UIWindowLevelNormal，当系统需要在其上面覆盖UIAlerView时，创建一个UIWindowLevelAlert层级的UIWindow 手工创建UIWindow 创建UIWindow和UIView不同的是，一旦被创建，它会自动的被添加到界面上。 @interface ViewController () { UIWindow *_uiwindow; } @end - (IBAction)click:(id)sender { _uiwindow = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds]; //设置其层级 _uiwindow.windowLevel = UIWindowLevelNormal; _uiwindow.backgroundColor = [UIColor redColor]; _uiwindow.hidden = NO; UIGestureRecognizer *gesture = [[UITapGestureRecognizer alloc] init]; [gesture addTarget:self action:@selector(hideWindow:)]; [_uiwindow addGestureRecognizer:gesture]; } -(void)hideWindow:(UIGestureRecognizer *)gesture{ _uiwindow.hidden = YES; //移除的方式就是清空 _uiwindow = nil; } 作者(唐巧)在做有道云笔记时，想做一个密码保护功能，当用户从应用的任何界面按Home键退出，过一段时间再从后台换回来时，显示一个密码输入界面。这个密码界面可能从任何应用界面弹出，并且需要盖在所有界面的最上层，它很适合用一个UIWindow来实现 #import &lt;UIKit/UIKit.h&gt; @interface PasswordInputWindow : UIWindow -(void)show; +(instancetype)sharedInstance; @end #import &quot;PasswordInputWindow.h&quot; @implementation PasswordInputWindow{ UITextField *_textField; } +(instancetype)sharedInstance{ //更改其生命周期 static id sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^{ sharedInstance = [[self alloc] initWithFrame:[UIScreen mainScreen].bounds]; }); return sharedInstance; } -(instancetype)initWithFrame:(CGRect)frame{ self = [super initWithFrame:frame]; if (self) { UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(10, 50, 200, 20)]; label.text = @&quot;请输入密码&quot;; [self addSubview:label]; UITextField *textField = [[UITextField alloc] initWithFrame:CGRectMake(10, 80, 200, 20)]; textField.backgroundColor = [UIColor whiteColor]; //密码输入时单个显示 textField.secureTextEntry = YES; [self addSubview:textField]; UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(10, 110, 200, 44)]; [button setBackgroundColor:[UIColor blueColor]]; button.titleLabel.textColor = [UIColor blackColor]; [button setTitle:@&quot;确定&quot; forState:UIControlStateNormal]; [button addTarget:self action:@selector(completeButtonPressed) forControlEvents:UIControlEventTouchUpInside]; self.backgroundColor = [UIColor yellowColor]; [self addSubview:button]; _textField = textField; } return self; } -(void)show{ //使其成为主窗口，调用这个方法就让当前窗口成为主窗口 [self makeKeyWindow]; self.hidden = NO; } -(void)completeButtonPressed{ if ([_textField.text isEqualToString:@&quot;abcd&quot;]) { //关闭键盘 [_textField resignFirstResponder]; //辞去主窗口 [self resignKeyWindow]; self.hidden = YES; }else{ [self showErrorAlertView]; } } -(void)showErrorAlertView{ UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:nil message:@&quot;密码 错误，正确密码是abcd&quot; delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil, nil]; [alertView show]; } @end 只需要在应用进入后台的回调函数中，将该UIWindow创建显示出来即可 - (void)applicationDidEnterBackground:(UIApplication *)application { [[PasswordInputWindow sharedInstance] show]; } 需要注意的是，如果我们创建的window需要处理键盘事件，那就需要合理的将其设置为keyWindow.keyWindow是被系统设计用来接收键盘和其他非触摸事件的UIWindow。通过makeKeyWindow和resignKeyWindow来将自己的window设置为keyWindow，以及辞去keyWindow，]]></content>
    </entry>

    
  
  
</search>
